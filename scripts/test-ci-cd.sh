#!/bin/bash

# üöó Auto Aziz - Test de CI/CD Local
# Description: Simule la pipeline CI/CD en local pour valider avant push

set -e

# ===============================================
# üé® Couleurs pour l'affichage
# ===============================================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# ===============================================
# üìù Fonctions utilitaires
# ===============================================
print_header() {
    echo -e "${BLUE}=====================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}=====================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# ===============================================
# üîç Tests ESLint/Prettier
# ===============================================
test_linting() {
    print_header "üîç TESTS DE LINTING"
    
    print_info "V√©rification ESLint Backend..."
    cd backend
    npm run lint:check || {
        print_error "ESLint Backend failed"
        return 1
    }
    cd ..
    
    print_info "V√©rification ESLint Frontend..."
    cd frontend
    npm run lint:check || {
        print_error "ESLint Frontend failed"
        return 1
    }
    cd ..
    
    print_info "V√©rification Prettier Backend..."
    cd backend
    npm run format:check || {
        print_error "Prettier Backend failed"
        return 1
    }
    cd ..
    
    print_info "V√©rification Prettier Frontend..."
    cd frontend
    npm run format:check || {
        print_error "Prettier Frontend failed"
        return 1
    }
    cd ..
    
    print_success "Tous les tests de linting pass√©s"
}

# ===============================================
# üèóÔ∏è Tests de Build
# ===============================================
test_builds() {
    print_header "üèóÔ∏è TESTS DE BUILD"
    
    print_info "Build Backend..."
    cd backend
    npm run build || {
        print_error "Backend build failed"
        return 1
    }
    cd ..
    
    print_info "Build Frontend..."
    cd frontend
    npm run build || {
        print_error "Frontend build failed"
        return 1
    }
    cd ..
    
    print_success "Tous les builds r√©ussis"
}

# ===============================================
# üß™ Tests Unitaires
# ===============================================
test_units() {
    print_header "üß™ TESTS UNITAIRES"
    
    print_info "Tests Backend..."
    cd backend
    npm run test || {
        print_error "Backend tests failed"
        return 1
    }
    cd ..
    
    print_info "Tests Frontend..."
    cd frontend
    npm test -- --coverage --watchAll=false || {
        print_error "Frontend tests failed"
        return 1
    }
    cd ..
    
    print_success "Tous les tests unitaires pass√©s"
}

# ===============================================
# üîí Tests de S√©curit√©
# ===============================================
test_security() {
    print_header "üîí TESTS DE S√âCURIT√â"
    
    print_info "Audit s√©curit√© Backend..."
    cd backend
    npm audit --audit-level moderate || {
        print_error "Backend security audit failed"
        return 1
    }
    cd ..
    
    print_info "Audit s√©curit√© Frontend..."
    cd frontend
    npm audit --audit-level moderate || {
        print_error "Frontend security audit failed"
        return 1
    }
    cd ..
    
    print_success "Tous les audits de s√©curit√© pass√©s"
}

# ===============================================
# üê≥ Tests Docker
# ===============================================
test_docker() {
    print_header "üê≥ TESTS DOCKER"
    
    print_info "Build Docker Backend..."
    docker build -f backend/Dockerfile -t autoaziz-backend-test backend/ || {
        print_error "Docker backend build failed"
        return 1
    }
    
    print_info "Build Docker Frontend..."
    docker build -f frontend/Dockerfile -t autoaziz-frontend-test frontend/ || {
        print_error "Docker frontend build failed"
        return 1
    }
    
    # Nettoyage des images de test
    docker rmi autoaziz-backend-test autoaziz-frontend-test 2>/dev/null || true
    
    print_success "Tous les builds Docker r√©ussis"
}

# ===============================================
# üìä R√©sum√© des r√©sultats
# ===============================================
show_summary() {
    print_header "üìä R√âSUM√â CI/CD LOCAL"
    
    print_success "üîç Linting: PASSED"
    print_success "üèóÔ∏è Builds: PASSED"
    print_success "üß™ Tests: PASSED"
    print_success "üîí Security: PASSED"
    print_success "üê≥ Docker: PASSED"
    
    echo ""
    print_info "üöÄ Votre code est pr√™t pour le push !"
    echo ""
    print_info "Commandes de push sugg√©r√©es :"
    echo "  git add ."
    echo "  git commit -m 'feat: correction des erreurs ESLint et am√©lioration CI/CD'"
    echo "  git push origin main"
}

# ===============================================
# üéØ Fonction principale
# ===============================================
main() {
    clear
    echo -e "${PURPLE}"
    echo "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà "
    echo " ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà‚ñà  "
    echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà     ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà   "
    echo " ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà    "
    echo " ‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà "
    echo -e "${NC}"
    echo -e "${BLUE}üöó Auto Aziz - Test CI/CD Local${NC}"
    echo ""
    
    # V√©rification des pr√©requis
    if [ ! -d "backend" ] || [ ! -d "frontend" ]; then
        print_error "Dossiers backend/frontend non trouv√©s"
        exit 1
    fi
    
    case "${1:-}" in
        --lint)
            test_linting
            ;;
        --build)
            test_builds
            ;;
        --test)
            test_units
            ;;
        --security)
            test_security
            ;;
        --docker)
            test_docker
            ;;
        --help)
            echo "üöó Auto Aziz - Test CI/CD Local"
            echo ""
            echo "Usage: $0 [OPTION]"
            echo ""
            echo "Options:"
            echo "  --lint      Tests de linting uniquement"
            echo "  --build     Tests de build uniquement"
            echo "  --test      Tests unitaires uniquement"
            echo "  --security  Audits de s√©curit√© uniquement"
            echo "  --docker    Tests Docker uniquement"
            echo "  --help      Afficher cette aide"
            echo ""
            echo "Sans option: Pipeline compl√®te"
            ;;
        *)
            print_info "üî• Ex√©cution de la pipeline CI/CD compl√®te..."
            echo ""
            
            test_linting
            echo ""
            test_builds
            echo ""
            test_units
            echo ""
            test_security
            echo ""
            test_docker
            echo ""
            show_summary
            ;;
    esac
}

# ===============================================
# üé¨ Point d'entr√©e
# ===============================================
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi