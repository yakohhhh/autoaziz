#!/bin/bash

# üöÄ Auto Aziz - Installation automatique
# Ce script installe et configure automatiquement le projet complet

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
   ___        __           ___          _     
  / _ |__ __ / /_ ___    / _ |___ __ __(_)___ 
 / __ / // / __// _ \  / __ /_  // // //_  / 
/_/ |_\_,_/\__/ \___/ /_/ |_//__/\_,_/ /___/  
                                             
üöó Installation Automatique - Syst√®me Professionnel
EOF
echo -e "${NC}"

# V√©rification des pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©. Installation..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
else
    log_success "Node.js $(node --version) d√©tect√©"
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    log_error "npm n'est pas install√©"
    exit 1
else
    log_success "npm $(npm --version) d√©tect√©"
fi

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    log_warning "Docker n'est pas install√©. Installation..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    log_warning "Veuillez red√©marrer votre session pour utiliser Docker sans sudo"
else
    log_success "Docker $(docker --version | cut -d' ' -f3 | cut -d',' -f1) d√©tect√©"
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_warning "Docker Compose n'est pas install√©. Installation..."
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
else
    log_success "Docker Compose $(docker-compose --version | cut -d' ' -f4 | cut -d',' -f1) d√©tect√©"
fi

# Installation des d√©pendances backend
log_info "Installation des d√©pendances backend..."
cd apps/backend
npm install --production=false
log_success "D√©pendances backend install√©es"

# Installation des d√©pendances frontend
log_info "Installation des d√©pendances frontend..."
cd ../frontend
npm install
log_success "D√©pendances frontend install√©es"

cd ..

# Configuration de l'environnement
log_info "Configuration de l'environnement..."

# Copie et configuration du .env backend
if [ ! -f "backend/.env" ]; then
    cp backend/.env.example backend/.env
    log_warning "Fichier .env cr√©√© depuis .env.example"
    log_warning "‚ö†Ô∏è  IMPORTANT: Configurez vos variables d'environnement dans backend/.env"
    log_warning "   - SMTP_PASSWORD: Utilisez un Gmail App Password"
    log_warning "   - DB_*: Configurez votre base de donn√©es"
else
    log_success "Fichier .env existe d√©j√†"
fi

# Configuration de la base de donn√©es avec Docker
log_info "D√©marrage de la base de donn√©es PostgreSQL..."
docker-compose up -d postgres
sleep 5
log_success "Base de donn√©es PostgreSQL d√©marr√©e"

# Installation des outils de d√©veloppement globaux
log_info "Installation des outils de d√©veloppement..."
npm install -g @nestjs/cli typescript ts-node nodemon
log_success "Outils de d√©veloppement install√©s"

# Configuration Git hooks (si c'est un repo git)
if [ -d ".git" ]; then
    log_info "Configuration des Git hooks..."
    
    # Cr√©er le dossier hooks s'il n'existe pas
    mkdir -p .git/hooks
    
    # Hook pre-commit
    cat > .git/hooks/pre-commit << 'EOL'
#!/bin/bash
echo "üîç V√©rification pre-commit..."

# V√©rifier le linting backend
cd apps/backend
npm run lint
if [ $? -ne 0 ]; then
    echo "‚ùå Erreurs de linting backend d√©tect√©es"
    exit 1
fi

# V√©rifier les tests backend
npm run test
if [ $? -ne 0 ]; then
    echo "‚ùå Tests backend √©chou√©s"
    exit 1
fi

cd ../frontend
# V√©rifier le build frontend
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå Build frontend √©chou√©"
    exit 1
fi

echo "‚úÖ Pre-commit valid√©"
EOL

    chmod +x .git/hooks/pre-commit
    log_success "Git hooks configur√©s"
fi

# Build initial
log_info "Build initial du projet..."
cd apps/backend && npm run build
cd ../frontend && npm run build
cd ../..
log_success "Build initial termin√©"

# Configuration des scripts npm globaux
log_info "Configuration des scripts de d√©veloppement..."
cat > package.json << 'EOF'
{
  "name": "autoaziz-workspace",
  "version": "1.0.0",
  "description": "Auto Aziz - Syst√®me de gestion de rendez-vous avec v√©rification",
  "scripts": {
    "install:all": "npm install && cd apps/backend && npm install && cd ../frontend && npm install",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd apps/backend && npm run start:dev",
    "dev:frontend": "cd apps/frontend && npm start",
    "build": "npm run build:backend && npm run build:frontend",
    "build:backend": "cd apps/backend && npm run build",
    "build:frontend": "cd apps/frontend && npm run build",
    "test": "npm run test:backend && npm run test:frontend",
    "test:backend": "cd apps/backend && npm run test",
    "test:frontend": "cd apps/frontend && npm test -- --watchAll=false",
    "lint": "npm run lint:backend && npm run lint:frontend",
    "lint:backend": "cd apps/backend && npm run lint",
    "lint:frontend": "cd apps/frontend && npm run lint || true",
    "docker:dev": "docker-compose up --build",
    "docker:prod": "docker-compose -f docker-compose.prod.yml up --build",
    "clean": "rm -rf node_modules apps/backend/node_modules apps/frontend/node_modules apps/backend/dist apps/frontend/build",
    "reset": "npm run clean && npm run install:all"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/votre-username/autoaziz.git"
  },
  "keywords": [
    "auto",
    "garage",
    "appointments",
    "verification",
    "nestjs",
    "react",
    "typescript"
  ],
  "author": "Auto Aziz Team",
  "license": "MIT"
}
EOF

npm install
log_success "Scripts de d√©veloppement configur√©s"

# R√©sum√© final
# ===============================================
# üîß Configuration des hooks Git et ESLint
# ===============================================
setup_git_hooks() {
    print_header "üîß CONFIGURATION DES HOOKS GIT"
    
    if [ -d ".git" ]; then
        print_info "Configuration des hooks Git pour la qualit√© du code..."
        ./setup-git-hooks.sh
        print_success "Hooks Git configur√©s"
    else
        print_info "Pas de repository Git d√©tect√©, hooks ignor√©s"
    fi
}

# ===============================================
# üîç Test ESLint
# ===============================================
test_eslint() {
    print_header "üîç TEST ESLINT"
    
    print_info "Test de la configuration ESLint..."
    ./lint.sh --stats
    
    print_info "Application de corrections automatiques..."
    ./lint.sh --fix
    
    print_success "Configuration ESLint valid√©e"
}

print_success "‚úÖ Installation termin√©e avec succ√®s!"

# Configuration suppl√©mentaire
setup_git_hooks
test_eslint

echo ""
print_success "üéâ Auto Aziz est pr√™t √† l'emploi!"
echo ""
print_info "üöÄ Prochaines √©tapes:"
echo "1. Configurez vos variables d'environnement dans backend/.env"
echo "2. D√©marrez les services: docker-compose up -d"
echo "3. Acc√©dez √† l'application: http://localhost:3001"
echo "4. Consultez la documentation API: http://localhost:3000/api"
echo "5. Utilisez './lint.sh --fix' pour corriger le code automatiquement"

echo -e "${BLUE}üìã Commandes disponibles :${NC}"
echo -e "  ${YELLOW}npm run dev${NC}           - D√©marrer en mode d√©veloppement"
echo -e "  ${YELLOW}npm run build${NC}         - Build de production"
echo -e "  ${YELLOW}npm run test${NC}          - Lancer tous les tests"
echo -e "  ${YELLOW}npm run docker:dev${NC}    - D√©marrer avec Docker (dev)"
echo -e "  ${YELLOW}npm run docker:prod${NC}   - D√©marrer avec Docker (prod)"

echo -e "\n${BLUE}üîß Configuration requise :${NC}"
echo -e "  1. √âditez ${YELLOW}backend/.env${NC} avec vos variables"
echo -e "  2. Configurez votre Gmail App Password"
echo -e "  3. V√©rifiez la configuration de la base de donn√©es"

echo -e "\n${BLUE}üöÄ Pour d√©marrer :${NC}"
echo -e "  ${GREEN}npm run dev${NC}"

echo -e "\n${BLUE}üìö Documentation :${NC}"
echo -e "  - README.md - Documentation g√©n√©rale"
echo -e "  - VERIFICATION_SYSTEM_GUIDE.md - Guide du syst√®me de v√©rification"
echo -e "  - GMAIL_FIX_GUIDE.md - Configuration Gmail"

log_success "Installation Auto Aziz termin√©e !"