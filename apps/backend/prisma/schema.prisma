// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now()) @map("createdAt")

  @@map("contacts")
}

model Customer {
  id                    Int           @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String        @unique
  phone                 String
  notes                 String?       @db.Text
  // Statistiques
  totalVisits           Int           @default(0)
  totalCancellations    Int           @default(0)
  totalNoShows          Int           @default(0)
  totalSpent            Float         @default(0)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  vehicles              Vehicle[]
  appointments          Appointment[]

  @@map("customers")
  @@index([email])
  @@index([phone])
}

model Vehicle {
  id                  Int           @id @default(autoincrement())
  customerId          Int
  licensePlate        String
  vehicleType         String        @map("type")
  vehicleBrand        String        @map("brand")
  vehicleModel        String        @map("model")
  fuelType            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  customer            Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointments        Appointment[]

  @@map("vehicles")
  @@unique([customerId, licensePlate])
  @@index([licensePlate])
}

model Appointment {
  id                       Int       @id @default(autoincrement())
  customerId               Int?
  vehicleId                Int?
  // Données dupliquées pour les RDV sans compte client
  firstName                String
  lastName                 String
  email                    String
  phone                    String
  vehicleRegistration      String
  vehicleType              String
  vehicleBrand             String
  vehicleModel             String
  fuelType                 String?
  appointmentDate          DateTime  @db.Date
  appointmentTime          String
  status                   String    @default("pending_verification")
  verificationCode         String?
  emailVerified            Boolean?
  phoneVerified            Boolean?
  verificationCodeExpiry   DateTime?
  notes                    String?   @db.Text
  price                    Float?
  actualStatus             String?   // 'completed', 'no_show', 'cancelled'
  source                   String?   // 'online', 'phone', 'center'
  deletedAt                DateTime?
  deletionReason           String?
  deletionNote             String?   @db.Text
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @default(now()) @updatedAt
  
  customer                 Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  vehicle                  Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  @@map("appointments")
  @@index([email])
  @@index([appointmentDate])
  @@index([status])
  @@index([customerId])
  @@index([vehicleId])
  @@index([deletedAt])
}

model AppointmentDeletion {
  id                Int       @id @default(autoincrement())
  appointmentId     Int
  customerId        Int?
  customerName      String?
  appointmentDate   DateTime? @db.Date
  appointmentTime   String?
  deletionReason    String
  deletionNote      String?   @db.Text
  deletedBy         String?
  deletedAt         DateTime  @default(now())

  @@map("appointment_deletions")
  @@index([deletionReason])
  @@index([deletedAt])
}

model CustomerDeletion {
  id                 Int       @id @default(autoincrement())
  customerId         Int
  customerName       String?
  email              String?
  phone              String?
  deletionReason     String
  deletionNote       String?   @db.Text
  appointmentsCount  Int       @default(0)
  deletedBy          String?
  deletedAt          DateTime  @default(now())

  @@map("customer_deletions")
  @@index([deletedAt])
}
