name: üöÄ Auto Aziz CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # üîç Tests et validation du code
  test:
    name: üß™ Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: autoaziz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: üîß Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: üîß Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: üîç Lint backend code
        run: |
          cd backend
          npm run lint:check

      - name: üîç Lint frontend code
        run: |
          cd frontend
          npm run lint:check || (echo "‚ö†Ô∏è ESLint warnings found but not blocking build" && exit 0)

      - name: üß™ Backend Tests
        working-directory: ./backend
        run: npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: autoaziz_test

      - name: üß™ Frontend Tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: üèóÔ∏è Backend Build
        working-directory: ./backend
        run: npm run build

      - name: üèóÔ∏è Frontend Build
        working-directory: ./frontend
        run: npm run build

      - name: üìä Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # üîí Analyse de s√©curit√©
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîç Backend Security Audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate

      - name: üîç Frontend Security Audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

  # üê≥ Build et push des images Docker
  build:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ D√©ploiement automatique
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    environment:
      name: production
      url: https://autoaziz.com

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy to server
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "
            cd /opt/autoaziz &&
            git pull origin main &&
            docker-compose -f docker-compose.prod.yml down &&
            docker-compose -f docker-compose.prod.yml pull &&
            docker-compose -f docker-compose.prod.yml up -d &&
            docker system prune -f
          "

      - name: üîç Health Check
        run: |
          sleep 30
          curl -f https://autoaziz.com/health || exit 1